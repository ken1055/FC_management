<!DOCTYPE html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <title>売上<%= sale ? '編集' : '登録' %> - 店舗管理システム</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css"
    />
  </head>
  <body class="container py-5">
    <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4 rounded">
      <div class="container-fluid">
        <a class="navbar-brand" href="/">店舗管理システム</a>
        <div class="collapse navbar-collapse">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <% if (typeof session !== 'undefined' && session && session.user &&
            session.user.role === 'admin') { %>
            <li class="nav-item">
              <a class="nav-link" href="/stores/list">店舗一覧</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/sales/list">売上管理</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/groups/list">グループ管理</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/api/users/list">アカウント管理</a>
            </li>
            <% } %> <% if (typeof session !== 'undefined' && session &&
            session.user && session.user.role === 'agency') { %>
            <li class="nav-item">
              <a class="nav-link text-warning" href="/auth/promote"
                >管理者・役員に切り替え</a
              >
            </li>
            <% if (session.user.store_id) { %>
            <li class="nav-item">
              <a
                class="nav-link"
                href="/stores/profile/<%= session.user.store_id %>"
                >マイプロフィール</a
              >
            </li>
            <% } %>
            <li class="nav-item">
              <a class="nav-link" href="/sales/list">売上管理</a>
            </li>
            <% if (session.user.store_id) { %>
            <% } %> <% } %> <% if (typeof session !== 'undefined' && session &&
            session.user && (session.user.role === 'admin')) { %> <% } %> <% if
            (typeof session !== 'undefined' && session && session.user) { %>
            <li class="nav-item">
              <a class="nav-link" href="/auth/logout">ログアウト</a>
            </li>
            <% } else { %>
            <li class="nav-item">
              <a class="nav-link" href="/auth/login">ログイン</a>
            </li>
            <% } %>
          </ul>
        </div>
      </div>
    </nav>

<div class="card shadow-sm p-4 mb-4">
  <h2 class="mb-4"><%= title %></h2>
  
  <% if (typeof error !== 'undefined' && error) { %>
  <div class="alert alert-danger">
    <%= error %>
  </div>
  <% } %>
  
  <!-- 店舗ユーザーでstore_idが未設定の場合の案内 -->
  <% if (session.user.role === 'agency' && !session.user.store_id) { %>
  <div class="alert alert-warning">
    <h5><i class="bi bi-exclamation-triangle"></i> プロフィール設定が必要です</h5>
    <p class="mb-3">売上管理を利用するには、まず店舗プロフィールを作成してください。</p>
    <a href="/stores/create-profile" class="btn btn-primary">
      <i class="bi bi-person-plus"></i> プロフィールを作成
    </a>
    <a href="/" class="btn btn-secondary ms-2">ダッシュボードへ戻る</a>
  </div>
  <% } else { %>
  
  <!-- 登録タイプ選択 -->
  <div class="card mb-4">
    <div class="card-header bg-primary text-white">
      <h5 class="mb-0"><i class="bi bi-gear"></i> 登録タイプ選択</h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-6">
          <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="registrationType" id="individual" value="individual">
            <label class="form-check-label" for="individual">
              <div class="d-flex flex-column">
                <strong>個別取引登録</strong>
                <small class="text-muted">顧客を指定して個別の取引を記録</small>
              </div>
            </label>
          </div>
        </div>
        <div class="col-md-6">
          <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" name="registrationType" id="monthly" value="monthly" checked>
            <label class="form-check-label" for="monthly">
              <div class="d-flex flex-column">
                <strong>月次集計登録</strong>
                <small class="text-muted">従来通りの月単位売上登録</small>
              </div>
            </label>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- 個別取引登録フォーム -->
  <form id="individualForm" method="post" action="/sales/transaction" style="display: none;">
    <div class="card mb-4">
      <div class="card-header bg-success text-white">
        <h5 class="mb-0"><i class="bi bi-person-check"></i> 個別取引情報</h5>
      </div>
      <div class="card-body">
        <% if (session.user.role !== 'agency') { %>
        <div class="mb-3">
          <label class="form-label">店舗 <span class="text-danger">*</span></label>
          <select name="store_id" id="individual_store_id" class="form-select" required>
            <option value="">店舗を選択してください</option>
            <% stores.forEach(a => { %>
            <option value="<%= a.id %>"><%= a.name %></option>
            <% }) %>
          </select>
        </div>
        <% } else { %>
        <div class="mb-3">
          <label class="form-label">店舗</label>
          <input type="text" class="form-control" value="<%= agencyName %>" readonly>
          <input type="hidden" name="store_id" value="<%= session.user.store_id %>">
        </div>
        <% } %>

        <div class="mb-3">
          <label class="form-label">顧客 <span class="text-danger">*</span></label>
          <select name="customer_id" id="customer_select" class="form-select" required disabled>
            <option value="">まず店舗を選択してください</option>
          </select>
          <div class="form-text">
            <i class="bi bi-info-circle"></i> 
            顧客が見つからない場合は、先に<a href="/customers/new" target="_blank">顧客登録</a>を行ってください
          </div>
        </div>

        <div class="row">
          <div class="col-md-6">
            <div class="mb-3">
              <label class="form-label">取引日 <span class="text-danger">*</span></label>
              <input type="date" name="transaction_date" class="form-control" 
                     value="<%= new Date().toISOString().split('T')[0] %>" required>
            </div>
          </div>
          <div class="col-md-6">
            <div class="mb-3">
              <label class="form-label">金額 <span class="text-danger">*</span></label>
              <input type="number" name="amount" class="form-control" min="1" placeholder="例: 5000" required>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-md-6">
            <div class="mb-3">
              <label class="form-label">支払方法</label>
              <select name="payment_method" class="form-select">
                <option value="現金">現金</option>
                <option value="クレジットカード">クレジットカード</option>
                <option value="QR決済">QR決済</option>
                <option value="その他">その他</option>
              </select>
            </div>
          </div>
          <div class="col-md-6">
            <div class="mb-3">
              <label class="form-label">取引内容</label>
              <input type="text" name="description" class="form-control" placeholder="例: コーヒー豆購入">
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="d-flex justify-content-between">
      <a href="/sales/list" class="btn btn-secondary">
        <i class="bi bi-arrow-left"></i> 戻る
      </a>
      <button type="submit" class="btn btn-success">
        <i class="bi bi-check-circle"></i> 取引を登録
      </button>
    </div>
  </form>

  <!-- 月次集計登録フォーム（従来） -->
  <form id="monthlyForm" method="post" action="<%= typeof sale !== 'undefined' && sale ? '/sales/edit/' + sale.id : '/sales/new' %>">
    <div class="card mb-4">
      <div class="card-header bg-info text-white">
        <h5 class="mb-0"><i class="bi bi-calendar-month"></i> 月次売上情報</h5>
      </div>
      <div class="card-body">
        <% if (session.user.role !== 'agency') { %>
        <div class="mb-3">
          <label class="form-label">店舗 <span class="text-danger">*</span></label>
          <% if (typeof preselectedAgencyName !== 'undefined' && preselectedAgencyName) { %>
          <div class="alert alert-info">
            <i class="bi bi-info-circle"></i>
            <strong><%= preselectedAgencyName %></strong> が選択されています
          </div>
          <% } %>
          <select name="store_id" class="form-select" required>
            <option value="">店舗を選択してください</option>
            <% stores.forEach(a => { %>
            <option value="<%= a.id %>" <%= 
              (typeof sale !== 'undefined' && sale && sale.store_id === a.id) ? 'selected' : 
              (typeof preselectedAgencyId !== 'undefined' && preselectedAgencyId == a.id) ? 'selected' : ''
            %>>
              <%= a.name %> (ID: <%= a.id %>)
            </option>
            <% }) %>
          </select>
        </div>
        <% } else { %>
        <div class="mb-3">
          <label class="form-label">店舗</label>
          <input type="text" class="form-control" value="<%= agencyName %>" readonly>
          <input type="hidden" name="store_id" value="<%= session.user.store_id %>">
        </div>
        <% } %>
    
    <div class="mb-3">
      <label class="form-label">年 <span class="text-danger">*</span></label>
      <input 
        type="number" 
        name="year" 
        class="form-control" 
        min="2020" 
        max="2030"
        value="<%= typeof sale !== 'undefined' && sale ? sale.year : new Date().getFullYear() %>"
        required 
      />
    </div>
    
    <div class="mb-3">
      <label class="form-label">月 <span class="text-danger">*</span></label>
      <select name="month" class="form-select" required>
        <option value="">月を選択してください</option>
        <% for (let i = 1; i <= 12; i++) { %>
        <option value="<%= i %>" <%= (typeof sale !== 'undefined' && sale && sale.month === i) ? 'selected' : '' %>>
          <%= i %>月
        </option>
        <% } %>
      </select>
    </div>
    
    <div class="mb-3">
      <label class="form-label">売上金額 <span class="text-danger">*</span></label>
      <div class="input-group">
        <span class="input-group-text">¥</span>
        <input 
          type="number" 
          name="amount" 
          class="form-control" 
          min="0"
          step="1000"
          value="<%= typeof sale !== 'undefined' && sale ? sale.amount : '' %>"
          placeholder="0"
          required 
        />
      </div>
      <small class="form-text text-muted">1,000円単位で入力してください</small>
    </div>
    
    <% if (session.user.store_id || session.user.role !== 'agency') { %>
    <button type="submit" class="btn btn-success">
      <%= typeof sale !== 'undefined' && sale ? '更新' : '登録' %>
    </button>
    <% } %>
    <a href="/sales/list" class="btn btn-secondary ms-2">一覧へ戻る</a>
  </form>
  
  <% } %>
</div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
      // 登録タイプ切り替え
      document.addEventListener('DOMContentLoaded', function() {
        const individualRadio = document.getElementById('individual');
        const monthlyRadio = document.getElementById('monthly');
        const individualForm = document.getElementById('individualForm');
        const monthlyForm = document.getElementById('monthlyForm');
        const storeSelect = document.getElementById('individual_store_id');
        const customerSelect = document.getElementById('customer_select');

        // 初期状態設定
        toggleForms();

        // ラジオボタンの変更イベント
        individualRadio.addEventListener('change', toggleForms);
        monthlyRadio.addEventListener('change', toggleForms);

        function toggleForms() {
          if (individualRadio.checked) {
            individualForm.style.display = 'block';
            monthlyForm.style.display = 'none';
            // 店舗ユーザーの場合は自動で顧客を読み込み
            <% if (session.user.role === 'agency' && session.user.store_id) { %>
            loadCustomers(<%= session.user.store_id %>);
            <% } %>
          } else {
            individualForm.style.display = 'none';
            monthlyForm.style.display = 'block';
          }
        }

        // 店舗選択時の顧客読み込み（管理者用）
        if (storeSelect) {
          storeSelect.addEventListener('change', function() {
            const storeId = this.value;
            if (storeId) {
              loadCustomers(storeId);
            } else {
              customerSelect.innerHTML = '<option value="">まず店舗を選択してください</option>';
              customerSelect.disabled = true;
            }
          });
        }

        // 顧客データを読み込む関数
        async function loadCustomers(storeId) {
          try {
            customerSelect.innerHTML = '<option value="">読み込み中...</option>';
            customerSelect.disabled = true;

            const response = await fetch(`/customers/store/${storeId}/with-sales`);
            const data = await response.json();

            if (response.ok) {
              customerSelect.innerHTML = '<option value="">顧客を選択してください</option>';
              
              if (data.customers && data.customers.length > 0) {
                data.customers.forEach(customer => {
                  const option = document.createElement('option');
                  option.value = customer.id;
                  option.textContent = `${customer.name} ${customer.customer_code ? '(' + customer.customer_code + ')' : ''} - 累計: ¥${(customer.total_purchase_amount || 0).toLocaleString()}`;
                  customerSelect.appendChild(option);
                });
                customerSelect.disabled = false;
              } else {
                customerSelect.innerHTML = '<option value="">顧客が登録されていません</option>';
              }
            } else {
              throw new Error(data.error || '顧客データの取得に失敗しました');
            }
          } catch (error) {
            console.error('顧客読み込みエラー:', error);
            customerSelect.innerHTML = '<option value="">エラー: 顧客データを読み込めませんでした</option>';
            
            // エラーメッセージを表示
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-warning alert-dismissible fade show mt-2';
            alertDiv.innerHTML = `
              <i class="bi bi-exclamation-triangle"></i>
              顧客データの読み込みに失敗しました: ${error.message}
              <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            customerSelect.parentNode.appendChild(alertDiv);
          }
        }

        // フォーム送信時の処理
        individualForm.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          const submitBtn = this.querySelector('button[type="submit"]');
          const originalText = submitBtn.innerHTML;
          submitBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> 登録中...';
          submitBtn.disabled = true;

          try {
            const formData = new FormData(this);
            const response = await fetch('/sales/transaction', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(Object.fromEntries(formData))
            });

            const result = await response.json();

            if (response.ok) {
              // 成功メッセージを表示
              const successAlert = document.createElement('div');
              successAlert.className = 'alert alert-success alert-dismissible fade show';
              successAlert.innerHTML = `
                <i class="bi bi-check-circle"></i>
                ${result.message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
              `;
              this.insertBefore(successAlert, this.firstChild);

              // フォームをリセット
              this.reset();
              document.getElementById('monthly').checked = true;
              toggleForms();

              // 3秒後にリダイレクト
              setTimeout(() => {
                window.location.href = '/sales/list';
              }, 2000);
            } else {
              throw new Error(result.error || '取引の登録に失敗しました');
            }
          } catch (error) {
            console.error('登録エラー:', error);
            
            const errorAlert = document.createElement('div');
            errorAlert.className = 'alert alert-danger alert-dismissible fade show';
            errorAlert.innerHTML = `
              <i class="bi bi-exclamation-triangle"></i>
              エラー: ${error.message}
              <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            this.insertBefore(errorAlert, this.firstChild);
          } finally {
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
          }
        });
      });
    </script>
  </body>
</html>
